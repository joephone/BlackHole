<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android">
    <corners android:radius="14dp" />
    <size
        android:width="105dp"
        android:height="28dp" />
    <!--填充 -->
    <solid android:color="@color/white" />
    <!--描边 -->
    <stroke
        android:width="1dp"
        android:color="@color/white" />


    <!--<corners    //定义圆角-->
    <!--android:radius="dimension"      //全部的圆角半径-->
    <!--android:topLeftRadius="dimension"   //左上角的圆角半径-->
    <!--android:topRightRadius="dimension"  //右上角的圆角半径-->
    <!--android:bottomLeftRadius="dimension"    //左下角的圆角半径-->
    <!--android:bottomRightRadius="dimension" />    //右下角的圆角半径-->
    <!--Corners标签是用来字义圆角的，其中radius与其它四个并不能共同使用。-->


    <!--solid用以指定内部填充色-->
    <!--只有一个属性：-->


    <!--<gradient-->
        <!--android:type=["linear" | "radial" | "sweep"]    //共有3中渐变类型，线性渐变（默认）/放射渐变/扫描式渐变-->
    <!--android:angle="integer"     //渐变角度，必须为45的倍数，0为从左到右，90为从上到下-->
    <!--android:centerX="float"     //渐变中心X的相当位置，范围为0～1-->
    <!--android:centerY="float"     //渐变中心Y的相当位置，范围为0～1-->
    <!--android:startColor="color"   //渐变开始点的颜色-->
    <!--android:centerColor="color"  //渐变中间点的颜色，在开始与结束点之间-->
    <!--android:endColor="color"    //渐变结束点的颜色-->
    <!--android:gradientRadius="float"  //渐变的半径，只有当渐变类型为radial时才能使用-->
    <!--android:useLevel=["true" | "false"] />  //使用LevelListDrawable时就要设置为true。设为false时才有渐变效果-->
    <!--首先有三种渐变类型，分别是：linear（线性渐变）、radial（放射性渐变）、sweep（扫描式渐变）-->


    <!--<stroke-->
        <!--android:width="dimension"   //描边的宽度-->
    <!--android:color="color"   //描边的颜色-->
    <!--// 以下两个属性设置虚线-->
    <!--android:dashWidth="dimension"   //虚线的宽度，值为0时是实线-->
    <!--android:dashGap="dimension" />      //虚线的间隔-->


    <!--size和padding-->
    <!--这两个基本上不怎么用，因为他们所具有的功能，控件本身也能实现。 size:是用来定义图形的大小的。-->
    <!--<size-->
        <!--android:width="dimension"-->
        <!--android:height="dimension" />-->
    <!--<padding-->
        <!--android:left="dimension"-->
        <!--android:top="dimension"-->
        <!--android:right="dimension"-->
        <!--android:bottom="dimension" />-->


    <!--Shape的属性（rectangle、oval、line、ring）-->
    <!--上面我们讲了Shape的子标签的的作用，但Shape本身还没讲，Shape自已是可以定义当前Shape的形状的，比如上面的矩形，还有椭圆形，线形和环形；这些都是通过Shape标签的 shape属性来定义的，Shape标签总共有下面几个属性，我们一个个讲：-->



    <!--[html] view plaincopyprint?在CODE上查看代码片派生到我的代码片-->
    <!--android:shape=["rectangle" | "oval" | "line" | "ring"]-->
    <!--shape的形状，默认为矩形，可以设置为矩形（rectangle）、椭圆形(oval)、线性形状(line)、环形(ring)-->
    <!--下面的属性只有在android:shape="ring时可用：-->
    <!--android:innerRadius         尺寸，内环的半径。-->
    <!--android:innerRadiusRatio    浮点型，以环的宽度比率来表示内环的半径，-->
    <!--android:thickness           尺寸，环的厚度-->
    <!--android:thicknessRatio      浮点型，以环的宽度比率来表示环的厚度，例如，如果android:thicknessRatio="2"，-->
    <!--android:useLevel            boolean值，如果当做是LevelListDrawable使用时值为true，否则为false.-->
    <!--android:shape=["rectangle" | "oval" | "line" | "ring"]-->
    <!--shape的形状，默认为矩形，可以设置为矩形（rectangle）、椭圆形(oval)、线性形状(line)、环形(ring)-->
    <!--下面的属性只有在android:shape="ring时可用：-->
    <!--android:innerRadius         尺寸，内环的半径。-->
    <!--android:innerRadiusRatio    浮点型，以环的宽度比率来表示内环的半径，-->
    <!--android:thickness           尺寸，环的厚度-->
    <!--android:thicknessRatio      浮点型，以环的宽度比率来表示环的厚度，例如，如果android:thicknessRatio="2"，-->
    <!--android:useLevel            boolean值，如果当做是LevelListDrawable使用时值为true，否则为false.-->
    <!--可见，只有第一个shape是可用的，其它五个都是shape等于ring时所特有的。-->



    <!--注意，无论这里shape取什么形状，他的子标签都是可用的，但有时并不会有效果，比如在shape为椭圆时，那corners标签就不会有效果，很显然的道理。下面一个个看看各个形状都是怎么样的；-->

    <!--1、rectangle (矩形)-->
    <!--这就是上一节我们使用的形状，当我们不指定shape属性时，默认就是矩形的。-->

    <!--控件代码：-->
    <!--[html] view plaincopyprint?在CODE上查看代码片派生到我的代码片-->
    <!--<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"-->
        <!--android:layout_width="match_parent"-->
        <!--android:layout_height="match_parent"-->
        <!--android:orientation="horizontal" >-->
        <!--<TextView-->
            <!--android:layout_width="300dp"-->
            <!--android:layout_height="100dp"-->
            <!--android:layout_margin="10dp"-->
            <!--android:textColor="#ffffff"-->
            <!--android:textSize="18sp"-->
            <!--android:textStyle="bold"-->
            <!--android:background="@drawable/try_shape_3"/>-->
    <!--</LinearLayout>-->
    <!--<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"-->
        <!--android:layout_width="match_parent"-->
        <!--android:layout_height="match_parent"-->
        <!--android:orientation="horizontal" >-->
        <!--<TextView-->
            <!--android:layout_width="300dp"-->
            <!--android:layout_height="100dp"-->
            <!--android:layout_margin="10dp"-->
            <!--android:textColor="#ffffff"-->
            <!--android:textSize="18sp"-->
            <!--android:textStyle="bold"-->
            <!--android:background="@drawable/try_shape_3"/>-->
    <!--</LinearLayout>-->


    <!--shape代码：-->
    <!--[html] view plaincopyprint?在CODE上查看代码片派生到我的代码片-->
    <!--<?xml version="1.0" encoding="utf-8"?>-->
    <!--<shape xmlns:android="http://schemas.android.com/apk/res/android"-->
        <!--android:shape="rectangle">-->
        <!--<solid android:color="#ff00ff"/>-->
    <!--</shape>-->
    <!--<?xml version="1.0" encoding="utf-8"?>-->
    <!--<shape xmlns:android="http://schemas.android.com/apk/res/android"-->
        <!--android:shape="rectangle">-->
        <!--<solid android:color="#ff00ff"/>-->
    <!--</shape>-->
    <!--对应图形：-->


    <!--2、oval（椭圆）-->
    <!--控件代码不变，下面是shape代码：-->
    <!--[html] view plaincopyprint?在CODE上查看代码片派生到我的代码片-->
    <!--<?xml version="1.0" encoding="utf-8"?>-->
    <!--<shape xmlns:android="http://schemas.android.com/apk/res/android"-->
        <!--android:shape="oval">-->
        <!--<solid android:color="#ff00ff"/>-->
    <!--</shape>-->
    <!--<?xml version="1.0" encoding="utf-8"?>-->
    <!--<shape xmlns:android="http://schemas.android.com/apk/res/android"-->
        <!--android:shape="oval">-->
        <!--<solid android:color="#ff00ff"/>-->
    <!--</shape>-->
    <!--对应图形：（控件大小的矩形所对应的椭圆）-->


    <!--3、line(线形)-->


    <!--没觉得这个能有什么用……，也不讲了，没什么意思-->

    <!--4、ring（环形）-->
    <!--还记得他所特有的几个属性么：-->



    <!--[html] view plaincopyprint?在CODE上查看代码片派生到我的代码片-->
    <!--android:innerRadius         尺寸，内环的半径。-->
    <!--android:thickness           尺寸，环的厚度-->
    <!--android:innerRadiusRatio    浮点型，以环的宽度比率来表示内环的半径，-->
    <!--例如，如果android:innerRadiusRatio，表示内环半径等于环的宽度除以5，这个值是可以被覆盖的，默认为9.-->
    <!--android:thicknessRatio      浮点型，以环的宽度比率来表示环的厚度，例如，如果android:thicknessRatio="2"，-->
    <!--那么环的厚度就等于环的宽度除以2。这个值是可以被android:thickness覆盖的，默认值是3.-->
    <!--android:useLevel            boolean值，如果当做是LevelListDrawable使用时值为true，否则为false.-->
    <!--android:innerRadius         尺寸，内环的半径。-->
    <!--android:thickness           尺寸，环的厚度-->
    <!--android:innerRadiusRatio    浮点型，以环的宽度比率来表示内环的半径，-->
    <!--例如，如果android:innerRadiusRatio，表示内环半径等于环的宽度除以5，这个值是可以被覆盖的，默认为9.-->
    <!--android:thicknessRatio      浮点型，以环的宽度比率来表示环的厚度，例如，如果android:thicknessRatio="2"，-->
    <!--那么环的厚度就等于环的宽度除以2。这个值是可以被android:thickness覆盖的，默认值是3.-->
    <!--android:useLevel            boolean值，如果当做是LevelListDrawable使用时值为true，否则为false.-->
    <!--这么几个属性无外乎就是定义环形的内环尺寸和环的宽度。-->



    <!--举个例子：-->

    <!--控件定义：-->



    <!--[html] view plaincopyprint?在CODE上查看代码片派生到我的代码片-->
    <!--<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"-->
        <!--android:layout_width="match_parent"-->
        <!--android:layout_height="match_parent"-->
        <!--android:orientation="horizontal" >-->
        <!--<TextView-->
            <!--android:layout_width="300dp"-->
            <!--android:layout_height="100dp"-->
            <!--android:layout_margin="10dp"-->
            <!--android:textColor="#ffffff"-->
            <!--android:textSize="18sp"-->
            <!--android:textStyle="bold"-->
            <!--android:background="@drawable/try_shape_2"/>-->
    <!--</LinearLayout>-->
    <!--<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"-->
        <!--android:layout_width="match_parent"-->
        <!--android:layout_height="match_parent"-->
        <!--android:orientation="horizontal" >-->
        <!--<TextView-->
            <!--android:layout_width="300dp"-->
            <!--android:layout_height="100dp"-->
            <!--android:layout_margin="10dp"-->
            <!--android:textColor="#ffffff"-->
            <!--android:textSize="18sp"-->
            <!--android:textStyle="bold"-->
            <!--android:background="@drawable/try_shape_2"/>-->
    <!--</LinearLayout>-->
    <!--shape定义：（这里一定要要加上useLevel属性并定义为false，不然没有效果）-->





    <!--[html] view plaincopyprint?在CODE上查看代码片派生到我的代码片-->
    <!--<?xml version="1.0" encoding="utf-8"?>-->
    <!--<shape xmlns:android="http://schemas.android.com/apk/res/android"-->
        <!--android:shape="ring"-->
        <!--android:innerRadius="20dp"-->
        <!--android:thickness="50dp"-->
        <!--android:useLevel="false">-->

        <!--<solid android:color="#ff00ff"/>-->

    <!--</shape>-->
    <!--<?xml version="1.0" encoding="utf-8"?>-->
    <!--<shape xmlns:android="http://schemas.android.com/apk/res/android"-->
        <!--android:shape="ring"-->
        <!--android:innerRadius="20dp"-->
        <!--android:thickness="50dp"-->
        <!--android:useLevel="false">-->

        <!--<solid android:color="#ff00ff"/>-->

    <!--</shape>-->

</shape>
